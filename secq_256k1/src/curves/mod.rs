use crate::{fq::Fq, fr::Fr};
use ark_ec::{
    models::{ModelParameters, SWModelParameters},
    short_weierstrass_jacobian::{GroupAffine, GroupProjective},
};
use ark_ff::{Zero};

#[cfg(test)]
mod tests;

#[derive(Copy, Clone, Default, PartialEq, Eq)]
pub struct SecqParameters;

impl ModelParameters for SecqParameters {
    type BaseField = Fq;
    type ScalarField = Fr;
}

pub type Affine = GroupAffine<SecqParameters>;
pub type Projective = GroupProjective<SecqParameters>;

impl SWModelParameters for SecqParameters {
    /// COEFF_A = 0
    const COEFF_A: Fq = Fq::from_bytes_unchecked(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]);

    /// COEFF_B = 7
    const COEFF_B: Fq = Fq::from_bytes_unchecked(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07 ]);

    /// COFACTOR = 1
    const COFACTOR: &'static [u64] = &[0x1];

    /// COFACTOR_INV = 1
    const COFACTOR_INV: Fr = Fr::from_bytes_unchecked(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 ]);

    /// AFFINE_GENERATOR_COEFFS = (G1_GENERATOR_X, G1_GENERATOR_Y)
    const AFFINE_GENERATOR_COEFFS: (Self::BaseField, Self::BaseField) =
        (G_GENERATOR_X, G_GENERATOR_Y);

    #[inline(always)]
    fn mul_by_a(_: &Self::BaseField) -> Self::BaseField {
        Self::BaseField::zero()
    }
}

/// G_GENERATOR_X = 76c39f55 85cb160e b6b06c87 a2ce32e2 3134e45a 097781a6 a24288e3 7702eda6
pub const G_GENERATOR_X: Fq = Fq::from_bytes_unchecked(&[
    0x76, 0xc3, 0x9f, 0x55, 0x85, 0xcb, 0x16, 0x0e, 0xb6, 0xb0, 0x6c, 0x87, 0xa2, 0xce, 0x32, 0xe2, 0x31, 0x34, 0xe4, 0x5a, 0x09, 0x77, 0x81, 0xa6, 0xa2, 0x42, 0x88, 0xe3, 0x77, 0x02, 0xed, 0xa6,
]);

/// G_GENERATOR_Y = 3ffc646c 7b2918b5 dc2d265a 8e82a7f7 d18983d2 6e8dc055 a4120dda d952677f
pub const G_GENERATOR_Y: Fq = Fq::from_bytes_unchecked(&[
    0x3f, 0xfc, 0x64, 0x6c, 0x7b, 0x29, 0x18, 0xb5, 0xdc, 0x2d, 0x26, 0x5a, 0x8e, 0x82, 0xa7, 0xf7, 0xd1, 0x89, 0x83, 0xd2, 0x6e, 0x8d, 0xc0, 0x55, 0xa4, 0x12, 0x0d, 0xda, 0xd9, 0x52, 0x67, 0x7f,
]);
